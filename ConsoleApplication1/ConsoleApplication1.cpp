#include <iostream>
#include <vector>
#include <stdlib.h>
#include <time.h>
#include <map>




using namespace std;



#define MNS 0x1000000; // Вычитание первого операнда со вторым и добавление результата в третий 
#define PLS 0x2000000; // Сложение первого операнда со вторым и добавление результата в третий 
#define SBS 0x3000000; // Умножение первого операнда со вторым и добавление результата в третий 
#define DVD 0x4000000; // Деление первого операнда со вторым и добавление результата в третий 

#define MOV 0x5000000; // Перемещение
#define CPY 0x6000000; // Копирование 

#define LOR 0x7000000; // Логическое или
#define XOR 0x8000000; // Логическое исключающее или
#define NOR 0x9000000; // Инверсия

#define MOR 0xa000000; // Побитовый сдвиг вправо
#define MOL 0xb000000; // Побитовый сдвиг влево

//Опишем дополнительные команды//
//MORS Побитовый сдвиг вправо с сохранением операнда, воспроизводится как SBS -> MOR -> LOR
//MOLS Побитовый сдвиг влево с сохранением операнда
//--------------------------------//


void trasher(vector<vector<bool> >& ddr, uint8_t sizeReg)// передаём адрес объекта памяти
{
	vector <bool> reg; // ячейка памяти
	reg.resize(sizeReg); // размер ячейки

	for (auto sizeDdr = 0; sizeDdr < 1024; sizeDdr++)
	{
		for (auto a = 0; a < reg.size(); a++)
		{
			reg[a] = (rand() % 2);
		}
		ddr.push_back(reg);
		cout << sizeDdr << endl;
	}

	cout << "Ram trashed";
}


int main()
{	
	uint32_t cmd = 0;

	vector <vector <bool> > ddr;
	map<string, int> reg
	{
		{"FIRST", 30}, {"SECOND", 80}, {"THIRD", 60}
	};

	vector <int> ssd;
	setlocale(1, LC_ALL);
	srand(time(NULL));
	//----------------------------------------------------------------------------------//
	//							Заполнение мусором памяти								//
	//----------------------------------------------------------------------------------//
	trasher(ddr, 32); // Регистровая память заполняется ячейками по 8 бит. Всего ячеек 1024
	cout << ddr[500][0];
	cout << ddr[500][1];
	cout << ddr[500][2];
	cout << ddr[500][3];
	//----------------------------------------------------------------------------------//
	//			  Архитектура команд хранится в области памяти выделяемой для cmd		//
	//									Сложение 0b0001									//
	//									Вычитание 0b0010								//
	//									Умножение 0b0011								//
	//									 Деление 0b0100									//
	//----------------------------------------------------------------------------------//


	cout << endl;
	auto a = 0x00000002 + 0x00000010 + PLS;
	cout << "0x" << hex << a;

	while (1)
	{
		
	}

	return(0); // Или exit
	system("pause");
}

